// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
        mavenLocal()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()

    }

    project.version = "1.0.0-beta14"

}

subprojects {

    ext {
        hyperwalletGroupId = 'com.hyperwallet.android.ui'

        compileVersion = 30
        minVersion = 21
        targetVersion = 30
        codeVersion = 1

        hyperwalletCoreVersion = '1.0.0-beta12'
        hyperwalletInsightVersion = '1.0.0-beta02'
        //
        androidMaterialVersion = '1.0.0'
        appcompatVersion = '1.0.2'
        constraintlayoutVersion = '1.1.3'
        legacySupportV4Version = '1.0.0'
        recycleViewVersion = '1.0.0'
        lifecycleExtensionsVersion = '2.0.0'
        pagingRuntimeVersion = '2.1.0'
        //Testing
        extJunitVerson = '1.1.1'
        testRunnerVersion = '1.2.0'
        testRulesVersion = '1.2.0'
        espressoVersion = '3.2.0'
        mockServerVersion = '3.11.0'
        leakcanaryVersion = '1.6.3'
        mockitoVersion = '2.27.0'
        junitParamsVersion = '1.1.1'
        robolectricVersion = '4.1'
        coreTest = '1.3.0'
        mockWebServerVersion = '3.11.0'
        coreTest = '1.3.0'
        //
        jacocoVersion = "0.8.2"
        fileFilter = ['**/BuildConfig.*']
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task generateAggregatedJavadocs(type: Javadoc) {

    options.links 'https://hyperwallet.github.io/hyperwallet-android-sdk/',
            'http://docs.oracle.com/javase/7/docs/api/'
    options.addStringOption 'Xdoclint:none', '-quiet'

    def subs = rootProject.subprojects.findAll {sub -> sub.name != 'testutils'}
    rootProject.gradle.projectsEvaluated {
        rootProject.task("allJavadocs") {
            description = 'Generate an aggregated javadoc for all projects'
            group = "documentation"
            dependsOn subs.javadocs
            source subs.javadocs.source
            destinationDir rootProject.file("$rootProject.buildDir/docs/javadoc")
            classpath = rootProject.files(subs.javadocs.classpath)
        }
    }
}